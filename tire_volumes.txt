# Character type lists
LOWER = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", 
         "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
UPPER = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", 
         "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
DIGITS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
SPECIAL = ["!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+", 
           "[", "]", "{", "}", "|", ";", ":", "\"", "'", ",", ".", "<", ">", "?", "/", "`", "~"]

# 📂 word_in_file function
def word_in_file(word, filename, case_sensitive=False):
    with open(filename, "r", encoding="utf-8") as file:
        for line in file:
            entry = line.strip()
            if case_sensitive:
                if word == entry:
                    return True
            else:
                if word.lower() == entry.lower():
                    return True
    return False

# 🔍 word_has_character function
def word_has_character(word, character_list):
    for char in word:
        if char in character_list:
            return True
    return False

# 🧠 word_complexity function
def word_complexity(word):
    complexity = 0
    if word_has_character(word, LOWER):
        complexity += 1
    if word_has_character(word, UPPER):
        complexity += 1
    if word_has_character(word, DIGITS):
        complexity += 1
    if word_has_character(word, SPECIAL):
        complexity += 1
    return complexity

# 💪 password_strength function
def password_strength(password, min_length=10, strong_length=16):
    if word_in_file(password, "wordlist.txt", case_sensitive=False):
        print("Password is a dictionary word and is not secure.")
        return 0
    if word_in_file(password, "toppasswords.txt", case_sensitive=True):
        print("Password is a commonly used password and is not secure.")
        return 0
    if len(password) < min_length:
        print("Password is too short and is not secure.")
        return 1
    if len(password) > strong_length:
        print("Password is long, length trumps complexity this is a good password.")
        return 5

    complexity = word_complexity(password)
    return 1 + complexity

# 🧪 main loop function
def main():
    print("🔐 Password Strength Checker")
    print("Enter 'q' to quit.\n")

    while True:
        password = input("Enter a password to test: ").strip()
        if password.lower() == "q":
            print("Goodbye! Stay secure. 🚪")
            break

        score = password_strength(password)
        print(f"Strength rating for '{password}': {score}/5\n")

# 🧯 Execution block
if __name__ == "__main__":
    main()
